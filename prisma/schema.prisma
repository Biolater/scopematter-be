// ---------------- Generators & DB ----------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ---------------- Enums ----------------
enum RequestStatus {
  PENDING
  IN_SCOPE
  OUT_OF_SCOPE
}

enum ChangeOrderStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// ---------------- Models ----------------

// Clerk-backed freelancer user
model AppUser {
  id      String @id @default(cuid())
  clerkId String @unique
  email   String @unique

  firstName String?
  lastName  String?
  imageUrl  String?
  isActive  Boolean @default(true)

  projects     Project[]
  changeOrders ChangeOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Client (not logging in, but kept for reference / PDF output)
model Client {
  id      String  @id @default(cuid())
  name    String
  email   String?
  company String?

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Project created by freelancer
model Project {
  id          String  @id @default(cuid())
  name        String
  description String?

  status ProjectStatus @default(PENDING)

  userId String
  user   AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  scopeItems   ScopeItem[]
  requests     Request[]
  changeOrders ChangeOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Items explicitly agreed in project scope
model ScopeItem {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Requests made by client during project
model Request {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  description String
  status      RequestStatus

  changeOrder ChangeOrder?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Formalized out-of-scope work
model ChangeOrder {
  id String @id @default(cuid())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId String
  user   AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Pricing / delivery terms
  priceUsd  Decimal           @db.Decimal(10, 2)
  extraDays Int?
  status    ChangeOrderStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
